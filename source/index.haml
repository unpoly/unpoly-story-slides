!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{:charset => "utf-8"}/
    %title Unpoly
    %meta{:content => "A framework for easily creating beautiful presentations using HTML", :name => "description"}/
    %meta{:content => "Hakim El Hattab", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui", :name => "viewport"}/
    %link{:href => "css/reveal.css", :rel => "stylesheet"}/
    %link#theme{:href => "css/theme/blood.css", :rel => "stylesheet"}/
    %link{:href => "css/custom.css", :rel => "stylesheet"}/
    / Code syntax highlighting
    %link{:href => "lib/css/highlightjs/paraiso-dark.css", :rel => "stylesheet"}/
    / Printing and PDF exports
    :javascript
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    /[if lt IE 9]
      <script src="lib/js/html5shiv.js"></script>
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides

        %section
          %img.plain(src='pictures/logos/unpoly.png' width='50%')

        -#%section
        -#  %img.plain(src='pictures/logos/unpoly2.png' width='50%')
        -#
        -#%section
        -#  %img.plain(src='pictures/logos/unpoly3.png' width='50%')

        %section
          %h3 Javascript at makandra

          .fragment
            %p
              .line
                Random.js
              .subtle
                2008-2016

          .fragment
            %p
              .line
                AngularJS
              .subtle
                2013-2016

          .fragment
            %p
              .line
                Half-assed AngularJS
              .subtle
                2013-2016

        %section
          %h3
            AngularJS
            %span.subtle (2013-2016)

          %ul
            %li Used for: AMC backend, Blogger Ranking, KITT
            %li Client-side rendering
            %li Bidirectional mapping between Javascript data and HTML

        %section
          %h3.green This is AngularJS

          %pre
            %code.javascript
              :preserve
                app.controller('Todos', function($scope) {
                  $scope.tasks = ['Milk', 'Toast', 'Honey'];
                  $scope.addTask = function () {
                    $scope.tasks.push($scope.newTask);
                  }
                });

          %pre
            %code.html
              :preserve
                &lt;div ng-app='app' ng-controller='Todos'&gt;
                  &lt;div class="task" ng-repeat='task in tasks'&gt;
                    {{task}}
                  &lt;/div&gt;
                  &lt;input ng-model='newTask'&gt;
                  &lt;button ng-click='addTask()'&gt;Add task&lt;/button&gt;
                &lt;/div&gt;

          %p
            %a(href='http://codepen.io/triskweline/pen/yOpvNV' target='_blank') Run example on codepen.io

        %section
          %h3
            .red This is also AngularJS
          .s
            %pre
              %code.javascript
                :preserve
                  angular.module('app', []).directive('pane', ['$http', function($http) {
                    return {
                      require: ['^^tabs', 'ngModel'],
                      restrict: 'AEC',
                      transclude: true,
                      scope: {
                        title: '@',
                        info: '=description'
                        click: '&'
                      },
                      link: function(scope, element, attrs, controllers) {
                        ...
                      },
                      template: '&lt;div class='info'&gt;{{info}}&lt;/div&gt;' +
                                '&lt;ng-transclude&gt;&lt;/ng-transclude&gt;'
                    };
                  });

        %section
          %h3
            AngularJS
            %span.subtle (2013-2016)

          %ul
            %li.green Changes to data are visible immediately
            %li.green Good fit for:<br>Template builder, complex forms, calendar, Holly, PH-planner
            %li.red
              Many concepts increase complexity and make training difficult
              .subtle
                (scope inheritance, isolation, dependency injection, dot rule, digest cycle...)
            %li.red Angular 1 is EOL, leaving us in an awkward situation
            %li.red We don't know how we're going to build SPAs in 2016+

        %section
          %h3
            Half-assed AngularJS
            %span.subtle (2013-2016)

          %ul
            %li AMC frontend, REALCUBE
            %li Rendering is mostly on the server, then compiled again on the browser

            %li
              Uses Angular directives to run JS on matching HTML elements:

              %pre.xs
                %code.javascript(data-noescape)
                  :preserve
                    app.directive('screenshot', function() {
                      return {
                        link: function(scope, $element) {
                          // do something with an $element that has class "screenshot"
                        };
                      }
                    });

            %li
              Uses local scopes to toggle UI states:
              %pre.xs
                %code.html(data-noescape)
                  :preserve
                    &lt;div ng-init="more = false"&gt;
                      &lt;span ng-click="more = true"&gt;Show more&lt;/a&gt;
                      &lt;div ng-if="more"&gt;More information&lt;/div&gt;
                    &lt;/div&gt;

        %section
          %h3
            Half-assed AngularJS

          %ul
            %li.green Marrying HTML/Javascript through directives is great
            %li.red Crawlable content must always be rendered on the server,<br />so we can't really use this for important state changes
            %li.red No routing, so no real URLs for changed state
            %li.red Compile time is an issue on large pages
            %li.red All things considered, we're not very happy with this


        %section
          %h3
            Random.js
            %span.subtle (2008-2016)

          %ul.s
            %li All other projects
            %li.green Rendered on the server using Ruby
            %li.fragment.red
              Javascript:
              %ul
                %li Copy &amp; paste of untested (and flawed!) code snippets from cards and old projects
                %li Anything non-trivial is implemented with a wall of jQuery
                %li
                  .line Initialized randomly
                  .subtle (on load, <code>$.unobtrusive</code>, <code>&lt;script&gt;</code> tags, by library internals...)
                %li Cannot be composed to form new functionality
            %li.fragment.red
              UX in Random.js projects usually quite mediocre:
              %Ul
                %li Tedious navigation through endless CRUD tunnels
                %li List context is lost on every click
                %li Transient state (scroll positions, focus, unsaved form values) is lost on every click
                %li Feels like a slide show
                %li Screen flashes between clicks
                %li No layered interactions forces user to abandon forms
                %li Giant nested forms to work around some of these issues
            %li.fragment.red
              We go to great lengths to avoid writing JS in Random.js projects

        %section
          %h3 A shitty decision for our clients

          %table
            %tr
              %th
              %th Random.js
              %th Single-page app
            %tr
              %th
                Code
              %td
                %span.green Simple
              %td
                %span.red Complex
            %tr
              %th
                UX
              %td
                %span.red Painful
              %td
                %span.green Refined
            %tr
              %th
                Cost
              %td
                %span.green Affordable
              %td
                %span.red Expensive

        %section
          %p
            We just spent three years learning how Javascript works.
          %p
            Can we take some of those learnings back into the server-side paradigm?

        %section
          %h3
            What server-side apps
            .green
              do well

          %ol
            %li Wide choice of great and mature languages
            %li Synchronous data access
            %li Time to first render
            %li Everything has a URL
            %li Accessible for Google and <code>curl</code>
            %li Low complexity stack
            %li Works on low-end devices

        %section
          %h3
            What server-side apps
            .red
              don't do well

          %ol
            %li Slow interaction feedback
            %li Partial page updates require additional code on client & server
            %li Animation is complicated
            %li
              Page loads destroy transient state
              .subtle (scroll positions, unsaved form values, focus)
            %li
              Layered interactions are hard
              .subtle (modals, drop-downs, drawers)

        %section

          %h2
            Unpoly
            %span.subtle
              (2014-2016)

          %table.fragment
            %tr
              %th
              %th Random.js
              %th
                Unpoly app
              %th Single-page app
            %tr
              %th
                Code
              %td
                %span.green Simple
              %td
                %span.green Simple
              %td
                %span.red Complex
            %tr
              %th
                UX
              %td
                %span.red Painful
              %td
                %span.yellow-green Friendly
              %td
                %span.green Refined
            %tr
              %th
                Cost
              %td
                %span.green Affordable
              %td
                %span.green Affordable
              %td
                %span.red Expensive


        %section
          %h2 Unpoly
          %ul
            %li Unobtrusive Javascript framework
            %li Snappy UI for server-side apps
            %li Structure for organizing Javascript snippets
            %li In development for 18 months
            %li
              Largest open-source project we have
              .subtle
                #{552 + 130} commits (Spreewald: 259, Geordi: 282, ActiveType: 154)
            %li
              Currently powers:
              %br
              Nanomize, railslts.com, H&Z Smart Brain,<br />
              <a href="http://staging.makandra.de">new makandra.de</a>, <a href="https://makandracards-up.makandra.de">new makandra cards version</a>


        %section
          %h2
            .subtle Unpoly
            .line Design goals
          %ul
            %li Close UX-gap between server-side apps and SPAs
            %li Batteries included
            %li Enable some things that are hard (even in Angular)
            %li Works with existing code
            %li
              Backend-agnostic
              .subtle
                (although we have some really nice Rails bindings)
            %li Not for ambitious UI

        -#%section
        -#  %h3
        -#    Close the UX gap
        -#    .subtle
        -#      Between server-apps / SPAs
        -#
        -#  %ul
        -#    %li Perceived speed
        -#    %li Keep DOM and Javascript VM between requests
        -#    %li Layered interactions
        -#
        -#%section
        -#  %h3 Batteries included
        -#
        -#  %p
        -#    Unpoly ships with a basic implementation for established UI patterns:
        -#
        -#  %ul
        -#    %li navigation bars
        -#    %li infinite scrolling
        -#    %li drop-down menus
        -#    %li modals dialogs
        -#    %li ...
        -#
        -#
        -#
        -#%section
        -#  %h3 URLs are important
        -#
        -#  %ul
        -#    %li Everything has an URL
        -#    %li Support Google, <code>curl</code> and legacy browsers
        -#
        -#
        -#%section
        -#  %h3
        -#    Enable things that are hard
        -#    .subtle
        -#      (even in Angular!)
        -#
        -#  %ul
        -#    %li Page transitions
        -#    %li Scroll positions
        -#    %li Keep persistent elements
        -#    %li Testing async code


        %section
          %p
            Same code on the server:

          %ul
            %li
              %a(href='http://demo.upjs.io/sessions/CSARbQ/cards/6463?up_enabled=false') No Unpoly
            %li
              %a(href='http://demo.upjs.io/sessions/CSARbQ/cards/6463?up_enabled=true') With Unpoly

        %section
          %img(src='pictures/fragment_flow.svg' width='100%')

        %section

          %h3
            Update a page fragment
            .subtle
              without Javascript

          .columns
            .column
              %h4.subtle short.html
              %pre.xxs
                %code.html(data-noescape)
                  :preserve
                    &lt;div class="story"&gt;

                      &lt;p&gt;Story summary&lt;/p&gt;

                      &lt;a href="full.html" <mark>up-target=".story"</mark>&gt;
                        Read full story
                      &lt;/a&gt;

                    &lt;/div&gt;

                    <mark>&lt;p&gt;This text won't change&lt;/p&gt;</mark>

            .column
              %h4.subtle full.html
              %pre.xxs
                %code.html(data-noescape)
                  :preserve
                    &lt;div class="story"&gt;
                    
                      &lt;h1&gt;Full story&lt;/h1&gt;

                      &lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;
                    
                      &lt;a href="short.html" <mark>up-target=".story"&gt;</mark>
                        Read summary
                      &lt;/a&gt;

                    &lt;/div&gt;
          %ul
            %li.fragment Unpoly requests <code>full.html</code> via AJAX
            %li.fragment Server returns a <u>full HTML page</u> as usual
            %li.fragment Unpoly extracts the fragment that matches <code>.story</code>
            %li.fragment Unpoly swaps the old and new fragment
            %li.fragment Unpoly changes the browser URL to <code>http://host/full.html</code>

        %section

          %h3
            Update a page fragment
            .subtle
              without Javascript

          %p
            %a(href='http://unpoly.com/examples/update-fragment/' target='_blank') Run example on unpoly.com

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-target=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul
            %li Unpoly requests <code>full.html</code> via AJAX
            %li Server returns a <u>full HTML page</u> as usual
            %li Unpoly extracts the fragment that matches <code>.story</code>
            %li Unpoly swaps the old and new fragment
            %li Unpoly changes the browser URL to <code>http://host/full.html</code>

        %section

          %h3
            Open fragment in modal dialog
            .subtle
              without Javascript

          %p
            %a(href='http://unpoly.com/examples/modal/') Run example on unpoly.com

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-modal=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul
            %li Unpoly requests <code>full.html</code> via AJAX
            %li Server returns a <u>full HTML page</u> as usual
            %li Unpoly extracts the fragment that matches <code>.story</code>
            %li <mark>Unpoly displays the new fragment in a <code>&lt;div class="up-modal"&gt;</code></mark>
            %li Unpoly changes the browser URL to <code>http://host/full.html</code>

        %section

          %h3
            Open fragment in popup overlay
            .subtle
              without Javascript

          %p(style='visibility: hidden')
            %a(href='http://unpoly.com/examples/modal/') Run example on unpoly.com

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-popup=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul
            %li Unpoly requests <code>full.html</code> via AJAX
            %li Server returns a <u>full HTML page</u> as usual
            %li Unpoly extracts the fragment that matches <code>.story</code>
            %li <mark>Unpoly displays the new fragment in a <code>&lt;div class="up-popup"&gt;</code></mark>
            %li Unpoly changes the browser URL to <code>http://host/full.html</code>


        %section
          %h3 Layers

          .layers
            .layers--layer.is-document
              Document
              .layers--url
                http://app/list
            .layers--layer.is-modal
              Modal
              .layers--url
                http://app/new
            .layers--layer.is-popup
              Popup
              .layers--url
                http://app/autocomplete

          %ul
            %li Unpoly apps can layer up to three pages on top of each other
            %li Each layer has its own URL and can navigate without changing the others
            %li Links in an layer prefer to update fragments within the layer
            %li Changing a fragment behind the layer will close the layer
            %li Use this to <b>keep context</b> during interactions

        %section
          %img(src='pictures/gmail.png')

        %section
          %img(src='pictures/gmail_layers.png')

        %section
          %h3 Navigation

          %ul
            %li
              All fragment updates change the browser URL by default.
            %li
              .line
                Back/Forward buttons work as expected.
              .subtle
                Even scroll positions are restored.
            %li
              .line
                Linking to a fragment will <b>scroll the viewport</b> to reveal the fragment.
              .subtle
                Unpoly is aware of fixed navigation bars and will scroll further/less.
            %li
              Links to the current URL get an <a href="http://unpoly.com/up-current"><code>up-current</code></a>
              class automatically.
            %li
              .line
                Modals and popups have their own URL.
              .subtle
                When a modal closes, the background URL is restored.<br />
                Reloading a modal's URL shows the content as a full page.
            %li
              .line
                Use <a href="http://unpoly.com/up-back"><code>[up-back]</code></a> to link to a previous state.
              .subtle
                That's a real link with a URL, not <code>location.back()</code>


        %section
          %h3 Appending instead of replacing

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="tasks"&gt;
                  &lt;li&gt;Wash car&lt;/li&gt;
                  &lt;li&gt;Purchase supplies&lt;/li&gt;
                  &lt;li&gt;Fix tent&lt;/li&gt;
                &lt;/ul&gt;

                &lt;a class="next-page" href="/tasks?page=2"
                  up-target=".next-page, <mark>.tasks:after</mark>"&gt;Next page&lt;/a&gt;

        %section
          %h3 Enhancing elements

          %ul
            %li We need to marry HTML and Javascript

        %section
          %h3
            <span class="subtle">Toggle all: </span> On load

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;span class="toggle-all"&gt;Toggle all&lt;/span&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                $(function() {
                  $('.toggle-all').each(function() {
                    var $link = $(this);
                    $link.on('click', function() {
                      var $form = $link.closest('form');
                      var $checkboxes = $form.find(':checkbox');
                      var someUnchecked = $checkboxes.is(':not(:checked)');
                      $checkboxes.prop('checked', someUnchecked);
                    });
                  });
                });
                &nbsp;
                &nbsp;

          %p
            <a href="http://codepen.io/triskweline/pen/MyrVgG" target="_blank">Run example on codepen.io</a>.<br>
            This is what you see in jQuery tutorials.<br>
            HTML fragments loaded via AJAX don't get Javascriptified.

        %section
          %h3
            <span class="subtle">Toggle all: </span> $.unobtrusive

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;span class="toggle-all"&gt;Toggle all&lt;/span&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  var $fragment = $(this);
                  $fragment.find('.toggle-all').each(function() {
                    var $link = $(this);
                    $link.on('click', function() {
                      var $form = $link.closest('form');
                      var $checkboxes = $form.find(':checkbox');
                      var someUnchecked = $checkboxes.is(':not(:checked)');
                      $checkboxes.prop('checked', someUnchecked);
                    });
                  });
                });
                &nbsp;

          %p
            AJAX-loaded fragments can be Javascriptified manually by calling
            <br>
            <code>$fragment.activateUnobtrusiveJavascript()</code>.
            <br>
            Unfortunately devs often forget to only <code>find(...)</code> within in the new fragment.

        %section
          %h3
            <span class="subtle">Toggle all: </span> Angular directive

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;span class="toggle-all"&gt;Toggle all&lt;/span&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                app.directive('toggle-all', function() {
                  return {
                    restrict: 'C',
                    link: function(scope, $link) {
                      $link.on('click', function() {
                        var $form = $link.closest('form');
                        var $checkboxes = $form.find(':checkbox');
                        var someUnchecked = $checkboxes.is(':not(:checked)');
                        $checkboxes.prop('checked', someUnchecked);
                      });
                    }
                  }
                });

          %p
            It's nice how Angular lets us register a compiling function for a CSS selector.
            <br>
            Also we don't need to manually Javascriptify new fragments
            <br>
            as long as we insert them through Angular templates

        %section
          %h3
            <span class="subtle">Toggle all: </span> Unpoly compiler

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;span class="toggle-all"&gt;Toggle all&lt;/span&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.toggle-all', function($link) {
                  $link.on('click', function() {
                    var $form = $link.closest('form');
                    var $checkboxes = $form.find(':checkbox');
                    var someUnchecked = $checkboxes.is(':not(:checked)');
                    $checkboxes.prop('checked', someUnchecked);
                  });
                });
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;

          %p
            This is the <b>only</b> way you run Javascript in Unpoly.
            No <code>&lt;script&gt;</code>. No <code>$(...)</code>.
            <br>
            Unpoly automatically compiles all fragments that it inserts or updates.
            <br>
            If you insert content without Unpoly (why??) use <a href="http://unpoly.com/up.hello"><code>up.hello(fragment)</code></a>.

        %section
          %h3 Integrating jQuery plugins

          %h4.subtle Random.js

          %pre
            %code.javascript(data-noescape)
              :preserve
                $(function() {
                  var $areas = $('textarea.wysiwyg');
                  $areas.redactor();
                });

          %h4.subtle Unpoly

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('textarea.wysiwyg', function($area) {
                  $area.redactor();
                });

          %p.fragment
            Again: All Javascript must be applied from an <code>up.compiler</code>.<br>
            No <code>&lt;script&gt;</code>. No <code>$(...)</code>. No <code>window.onload</code>.

        %section
          %h3 Getting data into your JS
          %h4.subtle Random.js

          .s
            %pre
              %code.html(data-noescape)
                :preserve
                  &lt;div class="map"&gt;&lt;/div&gt;

                  &lt;script type="text/javascript"&gt;
                    var pins = [
                      { lat: 48.36, lng: 10.99, title: 'Friedberg' },
                      { lat: 48.75, lng: 11.45, title: 'Ingolstadt' }
                    ];
                    initMap($('.map'), pins);
                  &lt;/script&gt;

            %pre.fragment
              %code.javascript(data-noescape)
                :preserve
                  function initMap($element, pins) {
                    var map = new google.maps.Map($element);
                    pins.forEach(function(pin) {
                      var position = new google.maps.LatLng(pin.lat, pin.lng);
                      new google.maps.Marker({
                        position: position,
                        map: map,
                        title: pin.title
                      });
                    });
                  });

        %section
          %h3 Getting data into your JS
          %h4.subtle Unpoly

          .s
            %pre
              %code.html(data-noescape)
                :preserve
                  &lt;div class="map" up-data="[
                    { lat: 48.36, lng: 10.99, title: 'Friedberg' },
                    { lat: 48.75, lng: 11.45, title: 'Ingolstadt' }
                  ]"&gt;&lt;/div&gt;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;

            %pre
              %code.javascript(data-noescape)
                :preserve
                  up.compiler('.map', function($element, <mark>pins</mark>) {
                    var map = new google.maps.Map($element);
                    pins.forEach(function(pin) {
                      var position = new google.maps.LatLng(pin.lat, pin.lng);
                      new google.maps.Marker({
                        position: position,
                        map: map,
                        title: pin.title
                      });
                    });
                  });

        %section
          %h3 Getting data into your JS
          %h4.subtle Unpoly

          .s
            %pre
              %code.html(data-noescape)
                :preserve
                  &lt;div class="map" up-data="&lt;%= @pins.to_json %&gt;"&gt;&lt;/div&gt;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;

            %pre
              %code.javascript(data-noescape)
                :preserve
                  up.compiler('.map', function($element, <mark>pins</mark>) {
                    var map = new google.maps.Map($element);
                    pins.forEach(function(pin) {
                      var position = new google.maps.LatLng(pin.lat, pin.lng);
                      new google.maps.Marker({
                        position: position,
                        map: map,
                        title: pin.title
                      });
                    });
                  });

        %section
          %h3 Symmmetry to BEM blocks

          %pre
            %code.nohighlight(data-noescape)
              :preserve
                <b>app/assets/stylesheets/blocks</b>
                  head.css
                  map.css
                  photo_hero.css
                  screenshot.css
                  tail.css

                <b>app/assets/javascripts/compilers</b>
                  head.js
                  map.js
                  photo_hero.js
                  screenshot.js

        %section
          %h3
            .line
              Memory leaks

          %ul
            %li
              Our shitty Random.js is <b>full of memory leaks</b>.
            %li
              We just don't notice because the Javascript VM is reset between page loads!
            %li
              We can't have memory leaks in persistent Javascript VMs
              .subtle
                like Angular.js, Unpoly, Turbolinks
            %li
              Background: <a href="https://makandracards.com/makandra/31325-how-to-create-memory-leaks-in-jquery">one</a>,
              <a href="https://makandracards.com/makandra/31289-how-to-create-giant-memory-leaks-in-angularjs">two</a>.

        %section
          %h3 Random.js

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  $(this).find('clock', function() {

                    var $clock = $(this);

                    function updateClock() {
                      var now = new Date();
                      $clock.html(now.toString());
                    }

                    setInterval(updateClock, 1000);

                  });
                });

        %section
          %h3 Random.js: <span class="red">Leaky</span>


          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  $(this).find('clock', function() {

                    var $clock = $(this);

                    function updateClock() {
                      var now = new Date();
                      $clock.html(now.toString());
                    }

                    <mark class="bad">setInterval(updateClock, 1000);</mark> // creates one interval per &lt;clock&gt;!

                  });
                });

        %section
          %h3 Unpoly compiler: <span class="red">Still leaky</span>

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('clock', function($clock) {

                  function updateClock() {
                    var now = new Date();
                    $clock.html(now.toString());
                  }

                  <mark class="bad">setInterval(updateClock, 1000);</mark> // this still leaks memory!
                });
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h3 Unpoly compiler: <span class="green">Clean</span>

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('clock', function($clock) {

                  function updateClock() {
                    var now = new Date();
                    $clock.html(now.toString());
                  }

                  var interval = setInterval(updateClock, 1000);

                  <mark>return function() { clearInterval(interval) };</mark> // clean up when destroyed
                });
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h2 Response times
          %p
            %img.plain(src='pictures/ios_8_icons.jpg' width='50%')
          %p
            Users in 2016 expect more than a slide show.

        %section
          %h3 Response times

          %ul.s
            %li
              <b>0.1 second</b> is about the limit for having the user feel that the system is reacting
              instantaneously,
              <span class="subtle">meaning that no special feedback is necessary except to display the
              result.</span>
            %li
              <b>1.0 second</b> is about the limit for the user's flow of thought to stay uninterrupted, even
              though the user will notice the delay. <span class="subtle">Normally, no special feedback is necessary during
              delays of more than 0.1 but less than 1.0 second, but the user does lose the feeling of
              operating directly on the data.</span>
            %li
              <b>10 seconds</b> is about the limit for keeping the user's attention focused on the dialogue.
              <span class="subtle">
              For longer delays, users will want to perform other tasks while waiting for the computer
              to finish, so they should be given feedback indicating when the computer expects to be
              done. Feedback during the delay is especially important if the response time is likely to
              be highly variable, since users will then not know what to expect.</span>
          %p
            %cite
              Miller 1968; Card et al. 1991; Jacob Nielsen 1993

          %p
            Also see Google's <a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail">RAIL Performance Model</a>.

        %section
          %h3
            .subtle
              Reponse times
            .line
              Baseline: AngularJS

          %ul
            %li
              .line
                We write very few AngularJS interactions that don't rely on a connection.
              .subtle
                Template builder, Holly

            %li Most of our AngularJS interactions are still bound by server speed.
            %li
              .line
                Writing JSON takes time, too.
              .subtle
                60-300ms for index views in AMC backend
            %li
              .line
                Client-side rendering takes time, too.
            %li
              .line
                Users do like the instantaneous feedback
              .subtle
                (even if it just shows to an empty screen that is then populated over the wire)

        %section
          %h3
            .subtle
              Response times
            .line
              Unpoly's approach

          %ul
            %li Provide instantaneous feedback to all user input
            %li Make interactions appear faster than they really are
            %li Use best practices for server performance
            %li Free up enough time budget that we can afford to render<br />full pages on the server

        %section
          %h3 What you get out of the box
          %ul

            %li
              Clicked links/forms get an <a href="http://unpoly.com/up-active"><code>up-active</code></a> class while loading
              .subtle
                Get into a habit of styling <code>.up-active</code> for instantaneous feedback<br>
                Use throttling and Chrome's network tab

            %li
              We no longer parse and execute CSS, Javascript and build the DOM on every request
              .subtle
                makandra deck on Cards (140 ms), AMC frontend (360 ms)

            %li
              Links with an <a href="http://unpoly.com/up-instant"><code>up-instant</code></a> attribute load on <code>mousedown</code> instead of <code>click</code>
              .subtle
                Saves ~70 ms with a mouse (<a href="http://instantclick.io/click-test" target="_blank">test yourself</a>)
                %br
                Saves ~300 ms on unoptimized sites with touch device
                %br
                Your Linux/Windows apps do that, too!
            %li
              Links with <a href="http://unpoly.com/up-preload"><code>up-preload</code></a> attribute preload destination while hovering
              .subtle
                Saves ~200-400 ms minus configured delay (<a href="http://instantclick.io/click-test" target="_blank">test yourself</a>)

            -#%li <a href="http://unpoly.com"><code>up-dash</code></a> is a <a href="http://unpoly.com/up.macro">macro</a> for <code>up-target</code>, <code>up-instant</code> and <code>up-preload</code>.
            %li <code>GET</code> requests are cached for 5 minutes

        %section
          %p
            Feel the response time of an Unpoly app by opening a card on
            %br
            <a href="http://makandracards-up.makandra.de/makandra">makandracards-up.makandra.de</a>.


        %section
          %h3 How you can optimize further

          %ul
            %li Caching (duh!)
            %li Tailor responses for the <code>X-Up-Target</code> header
            %li Spinners
            %li We can still implement client-side interactions

        %section
          %h3 Optimize responses


        %section
          %h3 Spinners

          %p
            For the occasional long-running request, you can configure this globally:

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="spinner"&gt;Please wait!&lt;/div&gt;

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.spinner', function($element) {
                  function show() { $element.show() };
                  function hide() { $element.hide() };
                  up.on('up:proxy:slow', show);
                  up.on('up:proxy:recover', hide);
                  hide();
                  return function() {
                    up.off('up:proxy:slow', show);
                    up.off('up:proxy:recover', hide);
                  };
                });

          %p
            The <code>up:proxy:slow</code> event is triggered after 300 ms (configurable).

        %section
          %h3 We can still implement interactions on the client

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class='greeter'&gt;
                  &lt;input class='greeter--input'>
                  Hello &lt;span class='greeter--name'&gt;&lt;span&gt;!
                &lt;/div&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.greeter', function($element) {
                  var $input = $element.find('.greeter--input');
                  var $name = $element.find('.greeter--name');
                  $input.on('input', function() {
                    $name.text($input.val());
                  });
                });

        %section
          %h3
            .subtle
              Going nuclear
            .line
              Two-way bindings

          %p
            With <a href="http://rivetsjs.com/">Rivets.js</a> (6 KB):

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class='template' up-data='{ "name": "Arne" }'&gt;
                  &lt;input rv-value='name'>
                  Hello { name }!
                &lt;/div&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.template', function($element, data) {
                  var view = rivets.bind($element, data);
                  return view.unbind;
                });

        %section
          %h3 Animation
          %ul
            %li Why it's hard
            %li Ghosting ...
            %li View example on new makandra.de

        %section
          %h2
            Composability

          %ul
            %li
              Unpoly's default UJS behavior is a thin wrapper around a Javascript API
            %li
              If the default UJS behavior doesn't fit your use case,<br>you can use
              that Javascript API from your own code, or invent new UJS syntax


        %section
          %h3
            .line Dual interfaces

          %h4.subtle <u>U</u>nobtrusive

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" up-target=".story"&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %h4.subtle <u>P</u>rogrammatic

          %pre
            %code.javascript
              :preserve
                up.replace('.story', 'full.html');

        %section

          %h3
            .line Invent your own UJS syntax

          %h4.subtle HTML

          %pre.l
            %code.html(data-noescape)
              :preserve
                &lt;a menu-link href="/details"&gt;Show more&lt;/span&gt;

          %h4.subtle Javascript

          %pre.l
            %code.javascript
              :preserve
                up.compiler('[menu-link]', function($link) {
                  $link.on('click', function(event) {
                    event.preventDefault();
                    up.popup.attach($link, {
                      target: '.menu',
                      position: 'bottom-left',
                      animation: 'roll-down'
                    });
                  });
                });

        %section

          %h3
            .line Repurpose existing UJS syntax

          %h4.subtle HTML

          %pre.l
            %code.html(data-noescape)
              :preserve
                &lt;a menu-link href="/details"&gt;Show more&lt;/span&gt;

          %h4.subtle Javascript

          %pre.l
            %code.javascript
              :preserve
                up.macro('[menu-link]', function($link) {
                  $link.attr(
                    'up-target': '.menu',
                    'up-position': 'bottom-left',
                    'up-animation': 'roll-down'
                  });
                });
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h3
            .line Events

          %pre
            %code.javascript
              :preserve
                $(document).on('up:modal:open', function(event) {
                  if (dontLikeModals()) {
                    event.preventDefault();
                  }
                });

          -#.fragment
          -#  %p
          -#    You can also use <a href="http://unpoly.com/up.on"><code>up.on</code></a> to bind event handlers to <code>document</code>.<br />
          -#    <code>up.on</code> supports <a href="http://unpoly.com/up-data"><code>up-data</code></a> and discards handlers on unsupported browsers.
          -#
          -#  %pre
          -#    %code.javascript
          -#      :preserve
          -#        up.on('click', '.map', function(event, $element, data) {
          -#          // ...
          -#        });

        %section
          %h3
            .line All Async actions return promises

          %pre
            %code.javascript
              :preserve
                up.replace('.story', 'full.html').then(function() {
                  // Fragments were loaded and swapped
                });

          %pre
            %code.javascript
              :preserve
                up.morph('.old', '.new', 'cross-fade').then(function() {
                  // Transition has completed
                });

          %p
            <a href="https://makandracards.com/curriculum/35275-javascript-writing-asynchronous-code" target="_blank">Curriculum lesson on promises</a>

        %section
          %h3 Documentation
          %p
            View full documentation of JS functions,<br> events and UJS selectors on
            <a href="http://unpoly.com/">unpoly.com</a>.

        %section
          %h2 Forms

          %p
            Hard things with forms:

          %ul
            %li Submitting a form via AJAX
            %li File uploads via AJAX
            %li Detecting redirects
            %li Dealing with validation errors
            %li Server-side validations without a page load
            %li Submitting a form within a modal and staying within the modal

        %section
          %h3 Ajax forms

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;form method="post" action="/users" <mark>up-target=".main"</mark>&gt;
                  ...
                &lt;/form&gt;

          %ul
            %li A successful submission (status 200) will update <code>.main</code>
            %li
              A failed submission will (non-200 status) update the form itself
              .subtle
                (Or use an <code>up-fail-target</code> attribute)

        %section

          %h3 Return non-200 status<br />when validations fail

          %pre
            %code.ruby(data-noescape)
              :preserve
                class UsersController < ApplicationController

                  def create
                    user_params = params[:user].permit(:email, :password)
                    @user = User.new(user_params)
                    if @user.save?
                      sign_in @user
                    else
                      render 'form', <mark>status: :bad_request</mark>
                    end
                  end

                end

        %section
          %h3 Forms within a modal

          %ol
            %li Target a selector within the modal to stay within the modal.
            %li Target a selector behind the modal to close the modal.

        %section
          %h3 Validations without a page load

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users"&gt;

                  &lt;fieldset&gt;
                    &lt;label&gt;E-mail&lt;/label&gt;
                    &lt;input type="text" name="email" <mark>up-validate</mark>&gt;
                  &lt;/label&gt;

                  &lt;fieldset&gt;
                    &lt;label&gt;Password&lt;/label&gt;
                    &lt;input type="password" name="password"&gt;
                  &lt;/fieldset&gt;

                  &lt;button type="submit"&gt;Register&lt;/button&gt;

                &lt;/form&gt;

        %section
          %h3 Validations without a page load

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users"&gt;

                  <mark>&lt;fieldset&gt;                                    </mark>
                  <mark>  &lt;label&gt;E-mail&lt;/label&gt;                       </mark>
                  <mark>  &lt;input type="text" name="email" up-validate&gt;</mark>
                  <mark>&lt;/label&gt;                                      </mark>

                  &lt;fieldset&gt;
                    &lt;label&gt;Password&lt;/label&gt;
                    &lt;input type="password" name="password"&gt;
                  &lt;/fieldset&gt;

                  &lt;button type="submit"&gt;Register&lt;/button&gt;

                &lt;/form&gt;

        %section
          %h3 Validations without a page load

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users"&gt;

                  <mark>&lt;fieldset class="has-error"&gt;                                      </mark>
                  <mark>  &lt;label&gt;E-mail has already been taken!&lt;/label&gt;                   </mark>
                  <mark>  &lt;input type="text" name="email" up-validate value="foo@bar.com"&gt;</mark>
                  <mark>&lt;/label&gt;                                                          </mark>

                  &lt;fieldset&gt;
                    &lt;label&gt;Password&lt;/label&gt;
                    &lt;input type="password" name="password"&gt;
                  &lt;/fieldset&gt;

                  &lt;button type="submit"&gt;Register&lt;/button&gt;

                &lt;/form&gt;

        %section
          %h3 Validations without a page load

          %pre
            %code.ruby(data-noescape)
              :preserve
                class UsersController &lt; ApplicationController

                  def create
                    @user = User.new(user_params)
                    if up.validate?
                      @user.valid?  # run validations, but don't save to DB
                      render 'form' # render form with error messages
                    elsif @user.save?
                      sign_in @user
                    else
                      render 'form', status: :bad_request
                    end
                  end

                end

        %section
          %h3 Validations without a page load

          %pre
            %code.ruby(data-noescape)
              :preserve
                class UsersController &lt; ApplicationController

                  def create
                    @user = User.new(user_params)
                    <mark>if up.validate?</mark>
                    <mark>  @user.valid? </mark> # run validations, but don't save to DB
                    <mark>  render 'form'</mark> # render form with error messages
                    elsif @user.save?
                      sign_in @user
                    else
                      render 'form', status: :bad_request
                    end
                  end

                end

        %section
          %h3 Updating dependent fields

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/contracts"&gt;
                  &lt;select name="department" <mark>up-validate="[name=employee]"</mark>&gt;...&lt;/select&gt;
                  &lt;select name="employee"&gt;...&lt;/select&gt;
                &lt;/form&gt;


        %section
          %h3 Persisting elements
          %pre.l
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;video <mark>up-keep</mark> src="movie.mp4"&gt;&lt;/video&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" up-target=".story"&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

        %section
          %h3 Find-as-you-type search

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users" up-target=".list" <mark>up-observe="up.submit(this)"</mark>&gt;
                  &lt;input type="search" name="query" /&gt;
                &lt;/form&gt;

                &lt;div class="list"&gt;
                  &lt;% @users.each do |user| %&gt;
                    = link_to user.email, user
                  &lt;% end %&gt;
                &lt;/div&gt;

          %p
            <code>up-observe</code> reacts faster than our vintage <code>observeField</code> helper
            and has no concurrency issues.

        %section
          %h3 Find-as-you-type search

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users" up-target=".list" <mark>up-autosubmit</mark>&gt;
                  &lt;input type="search" name="query" /&gt;
                &lt;/form&gt;

                &lt;div class="list"&gt;
                  &lt;% @users.each do |user| %&gt;
                    = link_to user.email, user
                  &lt;% end %&gt;
                &lt;/div&gt;

          %p
            <code>up-observe</code> reacts faster than our vintage <code>observeField</code> helper
            and has no concurrency issues.

        %section
          %h3 Getting started

          %ul
            %li Read through <a href="http://unpoly.com">unpoly.com</a>
            %li <code>gem 'unpoly-rails'</code>
            %li Replace half your Javascript with <code>up-target</code> links
            %li Convert remaining Javascripts into <code>up.compiler</code>


        %section
          %h3 Rails integration

          %p
            Include <a href="http://www.rubydoc.info/gems/unpoly-rails/">unpoly-rails</a> In your <code>Gemfile</code>:

          %pre.xs
            %code.ruby
              :preserve
                gem 'unpoly-rails'

          %p
            In your controllers, views and helpers:

          %pre.xs
            %code.ruby
              :preserve
                up?                            # request.headers['X-Up-Target'].present?
                up.target                      # request.headers['X-Up-Target']
                up.title = 'Title from server' # response.headers['X-Up-Title'] = 'Title ...'
                up.validate?                   # request.headers['X-Up-Validate'].present?

          %p
            The gem also provides the JS and CSS assets for the latest Unpoly.

        %section
          %h3 Other installation methods

          %ul
            %li
              %a(href='http://unpoly.com/download#bower') Install with Bower
            %li
              %a(href='http://unpoly.com/download#cdn') Link to a CDN
            %li
              %a(href='http://unpoly.com/download#zip') Download as ZIP
            %li
              %a(hrf='http://unpoly.com/download#git') Clone with Git

          %p
            Although the Rails bindings are nice, Unpoly works with any kind of backend.<br>
            E.g. <a href="http://unpoly.com">unpoly.com</a> is a static middleman site using Unpoly.

        %section
          %h3 Bootstrap integration

          %ul
            %li
              Include <a href="https://raw.githubusercontent.com/unpoly/unpoly/master/dist/unpoly-bootstrap3.js">unpoly-bootstrap3.js</a> and
              <a href="https://raw.githubusercontent.com/unpoly/unpoly/master/dist/unpoly-bootstrap3.css">unpoly-bootstrap3.css</a>
            %li
              Configures Unpoly to use Bootstrap styles for dialogs,<br />
              marking current navigation tabs, etc.
            %li
              Makes Unpoly aware of fixed Bootstrap layout components when scrolling the viewport.
            %li
              In general we try to not do things that would totally clash with Bootstrap.

        %section
          %h3 Unit testing

          %p
            Use <a href="http://jasmine.github.io/">Jasmine</a> to describe examples.<br />
            Use <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a> to create sample elements.<br />
            Use <a href="http://unpoly.com/up.hello"><code>up.hello</code></a> to compile sample elements.

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.current-year', function($element) {
                  var year = new Date().getFullYear();
                  $element.text(year);
                });

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                describe('.current-year', function() {
                  it("displays today's year", function() {
                    $element = affix('.current-today');
                    up.hello($element);
                    year = new Date().getFullYear();
                    expect($element).toHaveText(year.toString());
                  });
                });

        %section
          %h3 Easier integration testing

          %p
            Disable animation:

          %pre
            %code.ruby(data-noescape)
              :preserve
                up.motion.config.enabled = false;

          %p
            Disable concurrent requests:

          %pre
            %code.ruby(data-noescape)
              :preserve
                up.proxy.config.maxRequests = 1;

          %p
            Wait before you do things:

          %pre.xs
            %code.ruby(data-noescape)
              :preserve
                AfterStep do
                  sleep 0.05 while page.evaluate_script('window.up && up.proxy.isBusy()')
                end
          %p
            (Or use <a href="https://github.com/makandra/spreewald#waiting-for-page-load"><code>patiently</code></a>).


        %section
          %h3 Legacy browsers

          %p
            Unpoly gracefully degrades with old versions of Internet Explorer:

          %table
            %tr
              %th Edge
              %td Full support
            %tr
              %th IE 10
              %td Full support
            %tr
              %th IE 9
              %td
                Page updates that change browser history<br>fall back to a classic page load.<br />
                Animations and transitions are skipped.
            %tr
              %th IE8
              %td Unpoly prevents itself from booting,<br>leaving you with a classic server-side application

        %section
          %table
            %tr
              %th
              %th Random.js
              %th
                Unpoly app
              %th Single-page app
            %tr
              %th
                Code
              %td
                %span.green Simple
              %td
                %span.green Simple
              %td
                %span.red Complex
            %tr
              %th
                UX
              %td
                %span.red Painful
              %td
                %span.yellow-green Friendly
              %td
                %span.green Refined
            %tr
              %th
                Cost
              %td
                %span.green Affordable
              %td
                %span.green Affordable
              %td
                %span.red Expensive


        %section
          %h3 Is Unpoly right for <br>my project?
          %ul
            %li In development since October 2014
            %li
              = "~ 500 specs"
              .subtle
                How many specs has your Random.js?
            %li Has seen some real world pain, but we're still learning new things
            %li <a href="http://unpoly.com/changelog">Changelog</a> lists breaking changes and compatible changes separately
            %li
              <a href="http://unpoly.com/search/">API</a> marks features as either <i>stable</i> or <i>experimental</i>.
            %li There will be breaking changes, but always a simple upgrade path

        %section
          %img.plain(src='pictures/logos/unpoly.png' width='50%')

        %section
          %p
            <a href="https://www.flickr.com/photos/127580645@N07/15215520777">iOS 8 icons</a> by Microsiervos


        %section
          %h2 Additional slides

        %section
          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="map" up-data="[
                  { lat: 48.36, lng: 10.99 },
                  { lat: 48.75, lng: 11.45 }
                ]"&gt;&lt;/div&gt;

                &lt;form method="post" action="/pins" <mark>up-target=".map"</mark>&gt;
                  Lat: &lt;input name="lat"&gt;
                  Lng: &lt;input name="lng"&gt;
                  &lt;button&gt;Add pin&lt;/button&gt;
                &lt;/form&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.map', function($element, pins) {
                  var map = new google.maps.Map($element);
                  pins.forEach(function(pin) {
                    var position = new google.maps.LatLng(pin.lat, pin.lng);
                    new google.maps.Marker({
                      position: position,
                      map: map
                    });
                });

        %section

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="map" up-data="&lt;%= @pins.to_json %&gt;"&gt;&lt;/div&gt;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &lt;form method="post" action="/pins" <mark>up-target=".map"</mark>&gt;
                  Lat: &lt;input name="lat"&gt;
                  Lng: &lt;input name="lng"&gt;
                  &lt;button&gt;Add pin&lt;/button&gt;
                &lt;/form&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.map', function($element, pins) {
                  var map = new google.maps.Map($element);
                  pins.forEach(function(pin) {
                    var position = new google.maps.LatLng(pin.lat, pin.lng);
                    new google.maps.Marker({
                      position: position,
                      map: map
                    });
                });

        %section

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="map" up-data="&lt;%= @pins.to_json %&gt;"&gt;&lt;/div&gt;




                &lt;%= form_for Pin.new, html: { 'up-target' =&gt; '.map' } do |form| %&gt;
                  Lat: &lt;%= form.text_field :lat %&gt;
                  Lng: &lt;%= form.text_field :lng %&gt;
                  &lt;%= form.submit 'Add pin' %&gt;
                &lt;% end %&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.map', function($element, pins) {
                  var map = new google.maps.Map($element);
                  pins.forEach(function(pin) {
                    var position = new google.maps.LatLng(pin.lat, pin.lng);
                    new google.maps.Marker({
                      position: position,
                      map: map
                    });
                });

        %section

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="map" up-data="&lt;%= @pins.to_json %&gt;"&gt;&lt;/div&gt;




                &lt;%= form_for Pin.new, html: { 'up-target' =&gt; '.map' } do |form| %&gt;
                  Lat: &lt;%= form.text_field :lat %&gt;
                  Lng: &lt;%= form.text_field :lng %&gt;
                  &lt;%= form.submit 'Add pin' %&gt;
                &lt;% end %&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.map', function($element, initialPins) {
                  var map = new google.maps.Map($element);
                  function renderPins(pins) { ... }
                  renderPins(initialPins);
                });
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;

        %section

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="map" up-data="&lt;%= @pins.to_json %&gt;" <mark>up-keep</mark>&gt;&lt;/div&gt;




                &lt;%= form_for Pin.new, html: { 'up-target' =&gt; '.map' } do |form| %&gt;
                  Lat: &lt;%= form.text_field :lat %&gt;
                  Lng: &lt;%= form.text_field :lng %&gt;
                  &lt;%= form.submit 'Add pin' %&gt;
                &lt;% end %&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.map', function($element, initialPins) {
                  var map = new google.maps.Map($element);
                  function renderPins(pins) { ... }
                  renderPins(initialPins);
                  <mark>$element.on('up:fragment:keep', function(event) {</mark>
                  <mark>  renderPins(event.newData);                     </mark>
                  <mark>});                                              </mark>
                });
                &nbsp;


        %section
          %p
            Use <a href="https://github.com/jasmine/jasmine-ajax">jasmine-ajax</a> to mock the network:

          %pre.xxs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.server-time', function($element) {
                  $element.text('Loading ...');
                  up.ajax('/time').then(function(time) { $element.text(time) };
                });

          %pre.xxs
            %code.javascript(data-noescape)
              :preserve
                describe('.current-year', function() {
                  it('fetches and displays the current time from the server', function() {
                    jasmine.Ajax.install();
                    var $element = affix('.server-time');
                    up.hello($element);
                    expect($element).toHaveText('Loading...');
                    jasmine.Ajax.requests.mostRecent().respondWith({
                      status: 200,
                      contentType: 'text/plain',
                      responseText: '13:37:00'
                    });
                    expect($element).toHaveText('13:37:00');
                  });
                });

    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.js"}
    :javascript
      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true },
          { src: 'plugin/notes/notes.js', async: true }
        ]
      });
