!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{:charset => "utf-8"}/
    %title Unpoly
    %meta{:content => "A framework for easily creating beautiful presentations using HTML", :name => "description"}/
    %meta{:content => "Hakim El Hattab", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui", :name => "viewport"}/
    %link{:href => "css/reveal.css", :rel => "stylesheet"}/
    %link#theme{:href => "css/theme/blood.css", :rel => "stylesheet"}/
    %link{:href => "css/custom.css", :rel => "stylesheet"}/
    / Code syntax highlighting
    %link{:href => "lib/css/highlightjs/paraiso-dark.css", :rel => "stylesheet"}/
    / Printing and PDF exports
    :javascript
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    /[if lt IE 9]
      <script src="lib/js/html5shiv.js"></script>
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides

        %section
          -#%p(style='text-align: right')
          -#  %img.plain(src='pictures/makandra/makandra-inverted.png' width='22%')
          %img.plain(src='pictures/logos/unpoly.png' width='50%')

          -#%p
          -#  %a(href='mailto:henning.koch@makandra.de') henning.koch@makandra.de
          -#  %br
          -#  %a(href='https://twitter.com/triskweline') @triskweline
          -#%p
          -#  &nbsp;

        %section
          %h3 Javascript at makandra

          .fragment
            %p
              .line
                Random.js
              .subtle
                2008-2016

          .fragment
            %p
              .line
                AngularJS
              .subtle
                2013-2016

          .fragment
            %p
              .line
                Half-assed AngularJS
              .subtle
                2013-2016

        %section
          %h3 AngularJS

          %ul
            %li AMC backend, Blogger Ranking, KITT
            %li.green Good fit for:<br>Template builder, complex forms, calendar, Holly, PH-planner
            %li.red Mediocre fit for:<br>Everything else
            %li.red
              Many concepts make training difficult
              .subtle
                (scope inheritance, isolation, dependency injection, digest cycle...)
            %li.red Angular 1 is EOL, leaving us in an awkward situation.
            %li.red We don't know how we're going to build SPAs in 2016+.

        %section
          %h3 Half-assed AngularJS

          %ul
            %li AMC frontend, REALCUBE
            %li
              Uses Angular directives to run JS on matching HTML elements
              .subtle
                (like an <code>$.unobtrusive</code> replacement):

              %pre.xs
                %code.javascript(data-noescape)
                  :preserve
                    app.directive('foo', function() {
                      return {
                        link: function(scope, $element) {
                          // do something with an $element that has class "foo"
                        };
                      }
                    });

            %li
              Use local scopes to toggle UI states:
              %pre.xs
                %code.html(data-noescape)
                  :preserve
                    &lt;div ng-init="more = false"&gt;
                      &lt;span ng-click="more = true"&gt;Show more&lt;/a&gt;
                      &lt;div ng-if="more"&gt;More information&lt;/div&gt;
                    &lt;/div&gt;

        %section
          %h3
            .subtle
              Half-assed AngularJS
            .line
              Issues

          %ul
            %li Crawlable content must always be rendered on the server,<br />so we can't really use this for important state changes
            %li No routing, so no real URLs for changed state
            %li Compile time is an issue on large pages
            %li All things considered, we're not very happy with this


        %section
          %h3 Random.js

          %ul.s
            %li All other projects
            %li Server-side applications
            %li
              Javascript is mainly:
              %ul
                %li copy &amp; paste of untested (and flawed!) code snippets from cards and old projects
                %li anything non-trivial is implemented with a wall of jQuery
                %li initialized randomly (on load, <code>$.unobtrusive</code>, <code>&lt;script&gt;</code> tags...)
            %li
              UX in Random.js projects usually quite mediocre:
              %Ul
                %li Tedious navigation through endless CRUD tunnels
                %li List context is lost on every click
                %li Feels like a slide show
                %li Giant nested forms
                %li Need to leave the current screen if a required record is missing
            %li
              We go to great lengths to avoid writing JS in Random.js projects

        %section
          %h3 A shitty decision for our clients

          %table
            %tr
              %th
              %th Random.js
              %th Single-page app
            %tr
              %th
                Code
              %td
                Simple
              %td
                Complex
            %tr
              %th
                UX
              %td
                Painful
              %td
                Fancy
            %tr
              %th
                Cost
              %td
                Cheap
              %td
                Expensive


        %section
          %h3
            What server-side apps
            .green
              do well

          %ol
            %li Wide choice of great and mature languages
            %li Synchronous data access
            %li Time to first render
            %li Everything has a URL
            %li Accessible for Google and <code>curl</code>
            %li Low complexity stack
            %li Works on low-end devices

        %section
          %h3
            What server-side apps
            .red
              don't do well

          %ol
            %li Slow interaction feedback
            %li Partial page updates require additional code on client & server
            %li Animation is complicated
            %li
              Page loads destroy transient state
              .subtle (scroll positions, unsaved form values)
            %li
              Layered interactions are hard
              .subtle (modals, drop-downs, drawers)

        %section
          %img.plain(src='pictures/logos/unpoly.png' width='50%')

        %section
          %table
            %tr
              %th
              %th Random.js
              %th.green
                Unpoly app
              %th Single-page app
            %tr
              %th
                Code
              %td
                Simple
              %td.green
                Simple
              %td
                Complex
            %tr
              %th
                UX
              %td
                Painful
              %td.green
                Friendly
              %td
                Fancy
            %tr
              %th
                Cost
              %td
                Cheap
              %td.green
                Cheap
              %td
                Expensive


        %section
          %h2 Unpoly
          %ul
            %li Unobtrusive Javascript framework
            %li Snappy UI for server-side apps
            %li Structure for Javascript code
            %li In development for 18 months
            %li
              Largest open-source project we have
              .subtle
                #{540 + 130} commits (Spreewald: 259, Geordi: 282, ActiveType: 154)
            %li
              Currently powers:
              %br
              Nanomize, railslts.com, H&Z Smart Brain,<br />
              <a href="http://staging.makandra.de">new makandra.de</a>, <a href="https://makandracards-up.makandra.de">new makandra cards version</a>


        %section
          %h2 Design goals
          %ul
            %li Close UX-gap between server-side apps and SPAs
            %li Batteries included
            %li Enable things that are hard (even in Angular)
            %li Not for ambitious UI
            %li Works with existing code
            %li
              Backend-agnostic
              .subtle
                (although we have some really nice Rails bindings)

        -#%section
        -#  %h3
        -#    Close the UX gap
        -#    .subtle
        -#      Between server-apps / SPAs
        -#
        -#  %ul
        -#    %li Perceived speed
        -#    %li Keep DOM and Javascript VM between requests
        -#    %li Layered interactions
        -#
        -#%section
        -#  %h3 Batteries included
        -#
        -#  %p
        -#    Unpoly ships with a basic implementation for established UI patterns:
        -#
        -#  %ul
        -#    %li navigation bars
        -#    %li infinite scrolling
        -#    %li drop-down menus
        -#    %li modals dialogs
        -#    %li ...
        -#
        -#
        -#
        -#%section
        -#  %h3 URLs are important
        -#
        -#  %ul
        -#    %li Everything has an URL
        -#    %li Support Google, <code>curl</code> and legacy browsers
        -#
        -#
        -#%section
        -#  %h3
        -#    Enable things that are hard
        -#    .subtle
        -#      (even in Angular!)
        -#
        -#  %ul
        -#    %li Page transitions
        -#    %li Scroll positions
        -#    %li Keep persistent elements
        -#    %li Testing async code


        %section
          %h2 Unpoly

          %p
            Gleicher serverseitiger Code:

          %ul
            %li
              %a(href='http://demo.upjs.io/sessions/CSARbQ/cards/6463?up_enabled=false') ohne Unpoly
            %li
              %a(href='http://demo.upjs.io/sessions/CSARbQ/cards/6463?up_enabled=true') mit Unpoly

        %section
          %img(src='pictures/fragment_flow.svg' width='100%')

        %section

          %h3
            Update a page fragment
            .subtle
              without Javascript

          %p
            %a(href='http://unpoly.com/examples/update-fragment/') Run example on unpoly.com

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-target=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul
            %li.fragment Unpoly requests <code>full.html</code> via AJAX
            %li.fragment Server returns a <u>full HTML page</u> as usual
            %li.fragment Unpoly extracts the fragment that matches <code>.story</code>
            %li.fragment Unpoly swaps the old and new fragment
            %li.fragment Unpoly changes the browser URL to <code>http://host/full.html</code>

        %section

          %h3
            Open fragment in modal dialog
            .subtle
              without Javascript

          %p
            %a(href='http://unpoly.com/examples/modal/') Run example on unpoly.com

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-modal=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul
            %li Unpoly requests <code>full.html</code> via AJAX
            %li Server returns a <u>full HTML page</u> as usual
            %li Unpoly extracts the fragment that matches <code>.story</code>
            %li <mark>Unpoly displays the new fragment in a <code>&lt;div class="up-modal"&gt;</code></mark>
            %li Unpoly changes the browser URL to <code>http://host/full.html</code>


        %section
          %h3 Appending instead of replacing

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="tasks"&gt;
                  &lt;li&gt;Wash car&lt;/li&gt;
                  &lt;li&gt;Purchase supplies&lt;/li&gt;
                  &lt;li&gt;Fix tent&lt;/li&gt;
                &lt;/ul&gt;

                &lt;a class="next-page" href="/tasks?page=2"
                  up-target=".next-page, <mark>.tasks:after</mark>"&gt;Next page&lt;/a&gt;

        %section
          %h3 Layers

          .layers
            .layers--layer.is-document
              Document
            .layers--layer.is-modal
              Modal
            .layers--layer.is-popup
              Popup

          %ul
            %li Changing a modal doesn't change the document<br />
            %li Changing a popup doesn't change the modal
            %li Links in an layer prefer to update fragments within the layer
            %li Changing a fragment behind the layer will close the layer
            %li Use this to <b>keep context</b> during interactions

        %section
          %img(src='pictures/gmail.png')

        %section
          %img(src='pictures/gmail_layers.png')

        %section
          %h3 Navigation

          %ul
            %li
              All fragment updates change the browser URL by default.
            %li
              .line
                Back/Forward buttons work as expected.
              .subtle
                Even scroll positions are restored.
            %li
              .line
                Linking to a fragment will <b>scroll the viewport</b> to reveal the fragment.
              .subtle
                Unpoly is aware of fixed navigation bars and will scroll further/less.
            %li
              Links to the current URL get an <a href="http://unpoly.com/up-current"><code>up-current</code></a>
              class automatically.
            %li
              .line
                Modals and popups have their own URL.
              .subtle
                When a modal closes, the background URL is restored.
            %li
              Use <a href="http://unpoly.com/up-back"><code>[up-back]</code></a> to link to a previous state.

        %section
          %h3 Enhancing elements

          %ul
            %li Keiner checkt $.unobtrusive
            %li Vgl. Angular
            %li up.compiler
            %li up.on
            %li up-data
            %li Legacy-Bibliotheken einbinden
            %li Adding structured data

        %section
          %h3 Symmmetry to BEM blocks

        %section
          %h3
            .subtle
              We need to talk about
            .line
              Memory leaks

          %ul
            %li
              Our shitty Random.js is <b>full of memory leaks</b>.
            %li
              We just don't notice because the Javascript VM is reset between page loads!
            %li
              We can't have memory leaks in persistent Javascript VMs
              %br
              like Angular.js, Unpoly, Turbolinks.
            %li
              Background: <a href="https://makandracards.com/makandra/31325-how-to-create-memory-leaks-in-jquery">one</a>,
              <a href="https://makandracards.com/makandra/31289-how-to-create-giant-memory-leaks-in-angularjs">two</a>.

        %section
          %h3 Prevent memory leaks

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  $(this).find('clock', function() {

                    var $clock = $(this);

                    function updateClock() {
                      var now = new Date();
                      $clock.html(now.toString());
                    }

                    setInterval(updateClock, 1000);

                  });
                });

        %section
          %h3 Prevent memory leaks

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  $(this).find('clock', function() {

                    var $clock = $(this);

                    function updateClock() {
                      var now = new Date();
                      $clock.html(now.toString());
                    }

                    <mark>setInterval(updateClock, 1000);</mark> // creates one interval per &lt;clock&gt;!

                  });
                });

        %section
          %h3 Prevent memory leaks

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('clock', function($clock) {

                  function updateClock() {
                    var now = new Date();
                    $clock.html(now.toString());
                  }

                  setInterval(updateClock, 1000); // this still leaks memory!
                });
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h3 Prevent memory leaks

          %h4.subtle HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4.subtle Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('clock', function($clock) {

                  function updateClock() {
                    var now = new Date();
                    $clock.html(now.toString());
                  }

                  var interval = setInterval(updateClock, 1000);

                  <mark>return function() { clearInterval(interval) };</mark>
                });
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h3 Response times

          %ul.s
            %li
              <b>0.1 second</b> is about the limit for having the user feel that the system is reacting
              instantaneously, meaning that no special feedback is necessary except to display the
              result.
            %li
              <b>1.0 second</b> is about the limit for the user's flow of thought to stay uninterrupted, even
              though the user will notice the delay. Normally, no special feedback is necessary during
              delays of more than 0.1 but less than 1.0 second, but the user does lose the feeling of
              operating directly on the data.
            %li
              <b>10 seconds</b> is about the limit for keeping the user's attention focused on the dialogue.
              For longer delays, users will want to perform other tasks while waiting for the computer
              to finish, so they should be given feedback indicating when the computer expects to be
              done. Feedback during the delay is especially important if the response time is likely to
              be highly variable, since users will then not know what to expect.
          %p
            %cite
              Miller 1968; Card et al. 1991; Jacob Nielsen 1993

        %section
          %h3
            .line
              Reponse times
            .subtle
              Compared to AngularJS

          %ul
            %li We write very few AngularJS interactions that don't rely on an connection.<br />
            %li Most AngularJS interactions are still bound by server speed.
            %li
              .line
                Writing JSON takes time, too.
              .subtle
                60-300ms for index views in AMC backend
          %li
            Client-side rendering time is an issue for large screens.

        %section
          %h3 Freeing our time budget

          .s
            %ul

              %li
                Clicked links/forms get an <a href="http://unpoly.com/up-active"><code>up-active</code></a> class while loading
                .subtle
                  Get into a habit of styling this!<br>
                  Use throttling and Chrome's network tab

              %li
                We no longer parse and execute CSS, Javascript and build the DOM on every request
                .subtle
                  makandra deck on Cards (140 ms), AMC frontend (360 ms)

              %li
                Links with an <a href="http://unpoly.com/up-instant"><code>up-instant</code></a> attribute load on <code>mousedown</code> instead of <code>click</code>
                .subtle
                  Saves ~70 ms with a mouse (<a href="http://instantclick.io/click-test">test yourself</a>)
                  %br
                  Saves ~300 ms on unoptimized sites with touch device
                  %br
                  Your Linux/Windows apps do that, too!
              %li
                Links with <a href="http://unpoly.com/up-preload"><code>up-preload</code></a> attribute preload destination while hovering
                .subtle
                  Saves ~200-300 ms (<a href="http://instantclick.io/click-test">test yourself</a>)

              -#%li <a href="http://unpoly.com"><code>up-dash</code></a> is a <a href="http://unpoly.com/up.macro">macro</a> for <code>up-target</code>, <code>up-instant</code> and <code>up-preload</code>.
              %li <code>GET</code> requests are cached for 5 minutes
              %li Servers can optimize responses for the <code>X-Up-Target</code> header
              %li We can still implement client-side interactions

        %section
          %p
            Feel the response time of an Unpoly app by opening a card on
            %br
            <a href="http://makandracards-up.makandra.de/makandra">makandracards-up.makandra.de</a>.

        %section
          %h3 Spinners

          %p
            For the occasional long-running request, you can configure this globally:

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="spinner"&gt;Please wait!&lt;/div&gt;

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.spinner', function($element) {
                  function show() { $element.show() };
                  function hide() { $element.hide() };
                  up.on('up:proxy:slow', show);
                  up.on('up:proxy:recover', hide);
                  hide();
                  return function() {
                    up.off('up:proxy:slow', show);
                    up.off('up:proxy:recover', hide);
                  };
                });

          %p
            The <code>up:proxy:slow</code> event is triggered after 300 ms (configurable).

        %section
          %h3
            .subtle
              Or go nuclear
            .line
              Two-way bindings

          %p
            Use <a href="http://rivetsjs.com/">Rivets.js</a> (6 KB):

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class='template' up-data='{ "name": "Arne" }'&gt;
                  &lt;input rv-value='name'>
                  Hello, { name }!
                &lt;/div&gt;

          %pre
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.template', function($element, data) {
                  var view = rivets.bind($element, data);
                  return view.unbind;
                });

        %section
          %h3 Animation
          %ul
            %li Why it's hard
            %li Ghosting ...
            %li View example on new makandra.de

        %section
          %h3
            Composability

          %ul
            %li
              Unpoly's default UJS behavior is a thin wrapper around a Javascript API
            %li
              If the default UJS behavior doesn't fit your use case, you can use
              that Javascript API to compose your own behavior


        %section
          %h3
            .subtle Composability
            .line Dual interfaces

          %h4 Unobtrusive

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" up-target=".story"&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %h4 Programmatic

          %pre
            %code.javascript
              :preserve
                up.replace('.story', 'full.html');

        %section
          %h3
            .subtle Composability
            .line Events

          %pre
            %code.javascript
              :preserve
                $(document).on('up:modal:open', function(event) {
                  if (dontLikeModals()) {
                    event.preventDefault();
                  }
                });

        %section
          %h3
            .subtle Composability
            .line All Async actions return promises

          %pre
            %code.javascript
              :preserve
                up.replace('.story', 'full.html').then(function() {
                  // Fragments were loaded and swapped
                });

          %pre
            %code.javascript
              :preserve
                up.morph('.old', '.new', 'cross-fade').then(function() {
                  // Animation completed!
                });

        %section
          %p
            View full documentation of JS functions,<br> events and CSS selectors on
            <a href="http://unpoly.com/">unpoly.com</a>.

        %section
          %h3 Bootstrap integration

          %ul
            %li
              Include <a href="https://raw.githubusercontent.com/unpoly/unpoly/master/dist/unpoly-bootstrap3.js">unpoly-bootstrap3.js</a> and
              <a href="https://raw.githubusercontent.com/unpoly/unpoly/master/dist/unpoly-bootstrap3.css">unpoly-bootstrap3.css</a>
            %li
              Configures Unpoly to use Bootstrap styles for dialogs,<br />
              marking current navigation taps, etc.
            %li
              Makes Unpoly aware of fixed Bootstrap layout components when scrolling the viewport.

        %section
          %h3 Legacy browsers

          %p
            Unpoly gracefully degrades with old versions of Internet Explorer:

          %table
            %tr
              %th Edge
              %td Full support
            %tr
              %th IE 10
              %td Full support
            %tr
              %th IE 9
              %td
                Page updates that change browser history<br>fall back to a classic page load.<br />
                Animations and transitions are skipped.
            %tr
              %th IE8
              %td Unpoly prevents itself from booting,<br>leaving you with a classic server-side application

        %section
          %h3 Rails integration

          %p
            In your <code>Gemfile</code>:

          %pre
            %code.ruby
              :preserve
                gem 'unpoly-rails'

          %p
            In your controllers, views and helpers:

          %pre
            %code.ruby
              :preserve
                up?
                up.target # '.story'
                up.title = 'Title from server'
                up.validate?

          %p
            The gem also provides the JS and CSS assets for the latest Unpoly.

        %section
          %h2 Forms

          %p
            Hard things with forms:

          %ul
            %li Submitting a form via AJAX
            %li Submitting a form within a modal and stay within the modal
            %li Server-side validations without a page load

        %section
          %h3 Ajax forms

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;form method="post" action="/users" up-target=".main"&gt;
                  ...
                &lt;/form&gt;

          %ul
            %li A successful submission (status 200) will update <code>.main</code>
            %li A failed submission will (non-200 status) update the form itself

        %section

          %h3 Return non-200 status<br />when validations fail

          %pre
            %code.ruby(data-noescape)
              :preserve
                class UsersController < ApplicationController

                  def create
                    user_params = params[:user].permit(:email, :password)
                    @user = User.new(user_params)
                    if @user.save?
                      sign_in @user
                    else
                      render 'form', <mark>status: :bad_request</mark>
                    end
                  end

                end

        %section
          %h3 Forms within a modal

          %p.fragment
            Target a selector within the modal. Done.

        %section
          %h3 Validations without a page load

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users"&gt;

                  &lt;fieldset&gt;
                    &lt;label&gt;E-mail&lt;/label&gt;
                    &lt;input type="text" name="email" <mark>up-validate</mark> /&gt;
                  &lt;/label&gt;

                  &lt;fieldset&gt;
                    &lt;label&gt;Password&lt;/label&gt;
                    &lt;input type="password" name="password" <mark>up-validate</mark> /&gt;
                  &lt;/fieldset&gt;

                  &lt;button type="submit"&gt;Register&lt;/button&gt;

                &lt;/form&gt;

        %section
          %h3 Validations without a page load

          %pre
            %code.ruby(data-noescape)
              :preserve
                class UsersController &lt; ApplicationController

                  def create
                    @user = User.new(user_params)
                    if up.validate?
                      @user.valid?  # run validations, but don't save to DB
                      render 'form' # render form with error messages
                    elsif @user.save?
                      sign_in @user
                    else
                      render 'form', status: :bad_request
                    end
                  end

                end

        %section
          %h3 Validations without a page load

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users"&gt;

                  <mark>&lt;fieldset&gt;                                      </mark>
                  <mark>  &lt;label&gt;E-mail&lt;/label&gt;                         </mark>
                  <mark>  &lt;input type="text" name="email" up-validate /&gt;</mark>
                  <mark>&lt;/label&gt;                                        </mark>

                  &lt;fieldset&gt;
                    &lt;label&gt;Password&lt;/label&gt;
                    &lt;input type="password" name="password" up-validate /&gt;
                  &lt;/fieldset&gt;

                  &lt;button type="submit"&gt;Register&lt;/button&gt;

                &lt;/form&gt;

        %section
          %h3 Validations without a page load

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/users"&gt;

                  <mark>&lt;fieldset class="has-error"&gt;                                       </mark>
                  <mark>  &lt;label&gt;E-mail has already been taken!&lt;/label&gt;                    </mark>
                  <mark>  &lt;input type="text" name="email" up-validate value="foo@bar.com"/&gt;</mark>
                  <mark>&lt;/label&gt;                                                           </mark>

                  &lt;fieldset&gt;
                    &lt;label&gt;Password&lt;/label&gt;
                    &lt;input type="password" name="password" up-validate /&gt;
                  &lt;/fieldset&gt;

                  &lt;button type="submit"&gt;Register&lt;/button&gt;

                &lt;/form&gt;

        %section
          %h3 Updating dependent fields

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;form action="/contracts"&gt;
                  &lt;select name="department" up-validate="[name=employee]"&gt;...&lt;/select&gt;
                  &lt;select name="employee"&gt;...&lt;/select&gt;
                &lt;/form&gt;

        %section
          %h3 Keep elements
          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;video <mark>up-keep</mark> src="movie.mp4"&gt;&lt;/video&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" up-target=".story"&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

        %section
          %h3 Getting started

          %ul
            %li Read through <a href="http://unpoly.com">unpoly.com</a>
            %li <code>gem 'unpoly-rails'</code>
            %li Replace half your Javascript with <code>up-target</code>
            %li Convert remaining Javascripts into <code>up.compiler</code>

        %section
          %h3 Unit testing

          %p
            Use <a href="http://jasmine.github.io/">Jasmine</a> to describe examples.<br />
            Use <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a> to create sample elements.<br />
            Use <a href="http://unpoly.com/up.hello"><code>up.hello</code></a> to compile sample elements.

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.current-year', function($element) {
                  var year = new Date().getFullYear();
                  $element.text(year);
                });

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                describe('.current-year', function() {
                  it("displays today's year", function() {
                    $element = affix('.current-today');
                    up.hello($element);
                    year = new Date().getFullYear();
                    expect($element).toHaveText(year.toString());
                  });
                });

        %section
          %p
            Use <a href="https://github.com/jasmine/jasmine-ajax">jasmine-ajax</a> to mock the network:

          %pre.xxs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('.server-time', function($element) {
                  $element.text('Loading ...');
                  up.ajax('/time').then(function(time) { $element.text(time) };
                });

          %pre.xxs
            %code.javascript(data-noescape)
              :preserve
                describe('.current-year', function() {
                  it('fetches and displays the current time from the server', function() {
                    jasmine.Ajax.install();
                    var $element = affix('.server-time');
                    up.hello($element);
                    expect($element).toHaveText('Loading...');
                    jasmine.Ajax.requests.mostRecent().respondWith({
                      status: 200,
                      contentType: 'text/plain',
                      responseText: '13:37:00'
                    });
                    expect($element).toHaveText('13:37:00');
                  });
                });

        %section
          %h3 Easier integration testing

          %p
            Disable animation:

          %pre
            %code.ruby(data-noescape)
              :preserve
                up.motion.config.enabled = false;

          %p
            Disable concurrent requests:

          %pre
            %code.ruby(data-noescape)
              :preserve
                up.proxy.config.maxRequests = 1;

          %p
            Wait before you do things:

          %pre.xs
            %code.ruby(data-noescape)
              :preserve
                AfterStep do
                  sleep 0.05 while page.evaluate_script('up && up.proxy.isBusy()')
                end
          %p
            (Or use <a href="https://github.com/makandra/spreewald#waiting-for-page-load"><code>patiently</code></a>).

        %section
          %h2 Project state
          %ul
            %li In development since Oct 2014
            %li Powers Nanomize, railslts.com, H&Z Smart Brain
            %li 423 specs
            %li
              Release policy
              %ul
                %li Stable vs. Experimental
                %li Breaking changes
                %li Compatible changes

    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.js"}
    :javascript
      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true },
          { src: 'plugin/notes/notes.js', async: true }
        ]
      });
