!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}/
    %meta{:charset => "utf-8"}/
    %title Unpoly
    %meta{:content => "A framework for easily creating beautiful presentations using HTML", :name => "description"}/
    %meta{:content => "Hakim El Hattab", :name => "author"}/
    %meta{:content => "yes", :name => "apple-mobile-web-app-capable"}/
    %meta{:content => "black-translucent", :name => "apple-mobile-web-app-status-bar-style"}/
    %meta{:content => "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui", :name => "viewport"}/
    %link{:href => "css/reveal.css", :rel => "stylesheet"}/
    %link#theme{:href => "css/theme/blood.css", :rel => "stylesheet"}/
    %link{:href => "css/custom.css", :rel => "stylesheet"}/
    / Code syntax highlighting
    %link{:href => "lib/css/zenburn.css", :rel => "stylesheet"}/
    / Printing and PDF exports
    :javascript
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    /[if lt IE 9]
      <script src="lib/js/html5shiv.js"></script>
  %body
    .reveal
      / Any section element inside of this container is displayed as a slide
      .slides

        %section
          -#%p(style='text-align: right')
          -#  %img.plain(src='pictures/makandra/makandra-inverted.png' width='22%')
          %h2 Unpoly

          -#%p
          -#  %a(href='mailto:henning.koch@makandra.de') henning.koch@makandra.de
          -#  %br
          -#  %a(href='https://twitter.com/triskweline') @triskweline
          -#%p
          -#  &nbsp;

        %section
          %h3 Javascript at makandra

          %p
            .line
              Random.js
            .subtle
              2008-2016

          %p
            .line
              AngularJS
            .subtle
              2013-2016

          %p
            .line
              Half-assed AngularJS
            .subtle
              2013-2016

        %section
          %h3 AngularJS

          %ul
            %li AMC, Blogger Ranking, KITT
            %li.green Good fit for:<br>Template builder, complex forms, calendar, Holly, PH-planner
            %li.red Mediocre fit for:<br>Everything else
            %li.red
              Many concepts make training difficult
              .subtle
                (scopes, dependency injection, digest cycle...)
            %li.red Angular 1 is EOL, leaving us in an awkward situation.
            %li.red We don't know how we will build SPAs in 2016+.

        %section
          %h3 Random.js

          %ul
            %li All other projects
            %li Server-side applications
            %li
              Javascript is mainly
              %ul
                %li copy &amp; paste of untested (and flawed!) code snippets
                %li endless spaghetti of jQuery
            %li
              UX in Random.js projects usually quite mediocre: Endless series
              of CRUD screens
            %li
              We go to great lengths to avoid writing JS
              (giant nested forms)

        %section
          %h3 Entscheidung für unsere Kunden

          %blockquote
            Willst du's (geil und sauteuer) oder (mittelmäßig und billig)?

          %p
            Niemand möchte diese Entscheidung treffen.

          %p
            Die durchschnittliche GUI von uns ist weder zeitgemäß
            noch wettbewerbsfähig gegenüber anderen Agenturen.

        %section(data-background-color='#2c3e50')
          %h3 What server-side apps do well

          %ol
            %li Wide choice of great and mature languages
            %li Synchronous data access
            %li Time to first render
            %li Everything has a URL
            %li Accessible for Google and <code>curl</code>
            %li Low complexity stack
            %li Works on low-end devices

        %section(data-background-color='#921')
          %h3 What server-side apps don't do well

          %ol
            %li Slow interaction feedback
            %li Partial page updates require additional code on client & server
            %li Can't do animated transitions
            %li Page loads destroy transient state (scroll positions, unsaved form values)
            %li Layered interactions (modals, drop-downs, drawers) are hard

        %section
          %h2 Unpoly
          %ul
            %li In development for 18 months
            %li
              Largest open-source project we have
              .subtle
                #{540 + 130} commits (Spreewald: 259, Geordi: 282, ActiveType: 154)
            %li
              Currently powers:
              %br
              Nanomize, railslts.com, H&Z Smart Brain, new makandra.de

        %section
          %h2
            .subtle
              Design goals
            .line
              Close the UX gap between server-side and client-side apps

          %ul
            %li Layered interactions
            %li Perceived speed
            %li Keep Javascript VM

        %section
          %h1 Design goals
          %ul
            %li server-side and client-side apps
            %li Batteries included
            %li Enable things that are hard (even in Angular)
            %li Works with existing code

        %section
          %h2 Enable things that are hard (even in Angular!)

          %ul
            %li Page transitions
            %li Scroll positions
            %li Everything has an URL
            %li Crawlable

        %section
          %h2 Unpoly
          %ul
            %li Schnelle und moderne UI für serverseitige Apps
            %li AJAX ist Default
            %li Keine* serverseitige Änderungen nötig
            %li Alles hat eine URL
            %li Compiler-Registry wie <code>$.unobtrusive</code> oder Angular-Direktiven
            %li Geschwindigkeit
            %li Unterstützt allgegenwärtige UI-Patterns<br>(Navigationsleisten, Modals, Popups, Tooltips)
            %li Animation & Transition

        %section
          %h2 Unpoly

          %p
            Gleicher serverseitiger Code:

          %ul
            %li
              %a(href='http://demo.upjs.io/sessions/CSARbQ/cards/6463?up_enabled=false') ohne Unpoly
            %li
              %a(href='http://demo.upjs.io/sessions/CSARbQ/cards/6463?up_enabled=true') mit Unpoly

        %section
          %img(src='pictures/fragment_flow.svg' width='100%')

        %section

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-target=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul
            %li.fragment Unpoly requests <code>full.html</code> via AJAX
            %li.fragment Server returns a <u>full HTML page</u> as usual
            %li.fragment Unpoly extracts the fragment that matches <code>.story</code>
            %li.fragment Unpoly swaps the old and new fragment
            %li.fragment Unpoly changes the browser URL to <code>http://host/full.html</code>

        %section

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" <mark>up-modal=".story"</mark>&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %ul.fragment
            %li Unpoly requests <code>full.html</code> via AJAX
            %li Server returns a <u>full HTML page</u> as usual
            %li Unpoly extracts the fragment that matches <code>.story</code>
            %li <mark>Unpoly displays the new fragment in a <code>&lt;div class="up-modal"&gt;</code></mark>
            %li Unpoly changes the browser URL to <code>http://host/full.html</code>

        %section
          %h3 Layers

          .layers
            .layers--layer.is-document
              Document
            .layers--layer.is-modal
              Modal
            .layers--layer.is-popup
              Popup

          %ul
            %li Changing a modal doesn't change the document<br />
            %li Changing a popup doesn't change the modal
            %li Links in an layer prefer to update fragments within the layer
            %li Changing a fragment behind the layer will close the layer
            %li Use this to <b>keep context</b> during interactions

        %section
          %img(src='pictures/gmail.png')

        %section
          %img(src='pictures/gmail_layers.png')

        %section
          %h3 Appending instead of replacing

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="tasks"&gt;
                  &lt;li&gt;Wash car&lt;/li&gt;
                  &lt;li&gt;Purchase supplies&lt;/li&gt;
                  &lt;li&gt;Fix tent&lt;/li&gt;
                &lt;/ul&gt;

                &lt;a class="next-page" href="/tasks?page=2"
                  up-target=".next-page, .tasks:after"&gt;Next page&lt;/a&gt;

        %section
          %h3 Appending instead of replacing

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="tasks"&gt;
                  &lt;li&gt;Wash car&lt;/li&gt;
                  &lt;li&gt;Purchase supplies&lt;/li&gt;
                  &lt;li&gt;Fix tent&lt;/li&gt;
                &lt;/ul&gt;

                &lt;a class="next-page" href="/tasks?page=2"
                  up-target=".next-page, <mark>.tasks:after</mark>"&gt;Next page&lt;/a&gt;

        %section
          %h3 Navigation

          %ul
            %li
              All fragment updates change the browser URL by default.
            %li
              Back/Forward buttons work as expected.<br />
              Even scroll positions are restored.
            %li
              Linking to a fragment will <b>scroll the viewport</b> to reveal the fragment.<br />
              Unpoly is aware of fixed navigation bars when revealing.
            %li
              Links to the current URL get an <a href="http://unpoly.com/up-current"><code>up-current</code></a>
              class automatically.
            %li
              Modals and popups have their own URL.<br />
              When a modal closes, the background URL is restored.
            %li
              Use <a href="http://unpoly.com/up-back"><code>[up-back]</code></a> to link to a previous state.

        %section
          %h3 Enhancing elements

          %ul
            %li Keiner checkt $.unobtrusive
            %li Vgl. Angular
            %li up.compiler
            %li up.on
            %li up-data
            %li Legacy-Bibliotheken einbinden

        %section
          %h3 Prevent memory leaks

          %h4 HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4 Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  $(this).find('clock', function() {

                    var $clock = $(this);

                    function updateClock() {
                      var now = new Date();
                      $clock.html(now.toString());
                    }

                    setInterval(updateClock, 1000);

                  });
                });

        %section
          %h3 Prevent memory leaks

          %h4 HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4 Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                $.unobtrusive(function() {
                  $(this).find('clock', function() {

                    var $clock = $(this);

                    function updateClock() {
                      var now = new Date();
                      $clock.html(now.toString());
                    }

                    <mark>setInterval(updateClock, 1000);</mark>

                  });
                });

        %section
          %h3 Prevent memory leaks

          %h4 HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4 Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('clock', function($clock) {

                  function updateClock() {
                    var now = new Date();
                    $clock.html(now.toString());
                  }

                  setInterval(updateClock, 1000);
                });
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h3 Prevent memory leaks

          %h4 HTML

          %pre.xs
            %code.html(data-noescape)
              :preserve
                &lt;clock&gt;&lt;/clock&gt;

          %h4 Javascript

          %pre.xs
            %code.javascript(data-noescape)
              :preserve
                up.compiler('clock', function($clock) {

                  function updateClock() {
                    var now = new Date();
                    $clock.html(now.toString());
                  }

                  var interval = setInterval(updateClock, 1000);

                  <mark>return function() { clearInterval(interval) };</mark>
                });
                &nbsp;
                &nbsp;
                &nbsp;

        %section
          %h3 Speed

          %ul
            %li up-active
            %li up-instant
            %li up-preload
            %li up-dash
            %li Caching
            %li Spinners

        %section
          %h3 Animation
          %ul
            %li Why it's hard
            %li Ghosting ...

        %section
          %h3
            Composability

          %ul
            %li
              Unpoly's default UJS behavior is a thin wrapper around a Javascript API
            %li
              If the default UJS behavior doesn't fit your use case, you can use
              that Javascript API to compose your own behavior


        %section
          %h3
            .subtle Composability
            .line Dual interfaces

          %h4 Unobtrusive

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" up-target=".story"&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

          %h4 Programmatic

          %pre
            %code.javascript
              :preserve
                up.replace('.story', 'full.html');

        %section
          %h3
            .subtle Composability
            .line Events

          %pre
            %code.javascript
              :preserve
                $(document).on('up:modal:open', function(event) {
                  if (dontLikeModals()) {
                    event.preventDefault();
                  }
                });

        %section
          %h3
            .subtle Composability
            .line All Async actions return promises

          %pre
            %code.javascript
              :preserve
                up.replace('.story', 'full.html').then(function() {
                  // Fragments were loaded and swapped
                });

          %pre
            %code.javascript
              :preserve
                up.morph('.old', '.new', 'cross-fade').then(function() {
                  // Animation completed!
                });

        %section
          %h3 Bootstrap integration

          %ul
            %li
              Include <a href="https://raw.githubusercontent.com/unpoly/unpoly/master/dist/unpoly-bootstrap3.js">unpoly-bootstrap3.js</a> and
              <a href="https://raw.githubusercontent.com/unpoly/unpoly/master/dist/unpoly-bootstrap3.css">unpoly-bootstrap3.css</a>
            %li
              Configures Unpoly to use Bootstrap styles for dialogs,<br />
              marking current navigation taps, etc.
            %li
              Makes Unpoly aware of fixed Bootstrap layout components when scrolling the viewport.

        %section
          %h3 Legacy browsers

          %p
            Unpoly gracefully degrades with old versions of Internet Explorer:

          %table
            %tr
              %th Edge
              %td Full support
            %tr
              %th IE 10
              %td Full support
            %tr
              %th IE 9
              %td
                Page updates that change browser history fall back to a classic page load.<br />
                Animations and transitions are skipped.
            %tr
              %th IE8
              %td Unpoly prevents itself from booting itself, leaving you with a classic server-side application

        %section
          %h3 Rails integration

          %p
            In your <code>Gemfile</code>:

          %pre
            %code.ruby
              :preserve
                gem 'unpoly-rails'

          %p
            In your controllers, views and helpers:

          %pre
            %code.ruby
              :preserve
                up?
                up.target # '.story'
                up.title = 'Title from server'
                up.validate?

          %p
            The gem also provides the JS and CSS assets for the latest Unpoly.

        %section
          %h2 Forms

          %p
            Hard things with forms:

          %ul
            %li Submitting a form via AJAX
            %li Submitting a form within a modal and stay within the modal
            %li Server-side validations without a page load

        %section
          %h3 Ajax forms

          %pre
            %code.html(data-noescape)
              :preserve
                &lt;form method="post" action="/users" up-target=".main"&gt;
                  ...
                &lt;/form&gt;

          %ul
            %li A successful submission (status 200) will update <code>.main</code>
            %li A failed submission will (non-200 status) update the form itself

        %section

          %h3 Return non-200 status<br />when validations fail

          %pre
            %code.ruby(data-noescape)
              :preserve
                class UsersController < ApplicationController

                  def create
                    user_params = params[:user].permit(:email, :password)
                    @user = User.new(user_params)
                    if @user.save?
                      sign_in @user
                    else
                      render 'form', <mark>status: :bad_request</mark>
                    end
                  end

                end

        %section
          %h3 Forms within a modal

          %p.fragment
            Target a selector within the modal. Done.

        %section
          %h3 Keep elements
          %pre
            %code.html(data-noescape)
              :preserve
                &lt;div class="story"&gt;

                  &lt;audio <mark>up-keep</mark> src="song.mp3"&gt;&lt;/audio&gt;

                  &lt;p&gt;Story summary&lt;/p&gt;

                  &lt;a href="full.html" up-target=".story"&gt;
                    Read full story
                  &lt;/a&gt;

                &lt;/div&gt;

        %section
          %h3 Getting started

          %ul
            %li Read through <a href="http://unpoly.com">unpoly.com</a>
            %li <code>gem 'unpoly-rails'</code>
            %li Replace half your Javascript with <code>up-target</code>
            %li Convert remaining Javascripts into <code>up.compiler</code>

        %section
          %h3 Unit testing

          %p
            I recommend jasmine, jasmine-jquery and jasmine-ajax:

          %pre
            %code.javascript(data-noescape)
              :preserve
                describe('.current-year', function() {
                  it("displays today's year", function() {
                    $element = affix('.today');
                    up.hello($element);
                    year = new Date().getFullYear();
                    expect($element).toHaveText(year.toString());
                  });
                });

        %section
          %h3 Easier integration testing

          %p
            Disable animation:

          %pre
            %code.ruby(data-noescape)
              :preserve
                up.motion.config.enabled = false

          %p
            Disable concurrent requests:

          %pre
            %code.ruby(data-noescape)
              :preserve
                up.proxy.config.maxRequests = 1

          %p
            Wait before you do things:

          %pre.xs
            %code.ruby(data-noescape)
              :preserve
                AfterStep do
                  sleep 0.05 while page.evaluate_script('up && up.proxy.isBusy()')
                end
          %p
            (Or just use <a href="https://github.com/makandra/spreewald#waiting-for-page-load"><code>patiently</code></a>).

        %section
          %h2 Project state
          %ul
            %li In development since Oct 2014
            %li Powers Nanomize, railslts.com, H&Z Smart Brain
            %li 423 specs
            %li
              Release policy
              %ul
                %li Stable vs. Experimental
                %li Breaking changes
                %li Compatible changes

    %script{:src => "lib/js/head.min.js"}
    %script{:src => "js/reveal.js"}
    :javascript
      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true },
          { src: 'plugin/notes/notes.js', async: true }
        ]
      });
